name: Build And Deploy
on:
  push:
    branches:
      - production
jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      branch_name: ${{ steps.create_branch.outputs.branch_name }}
    steps:
      - name: Checkout project
        uses: actions/checkout@v2

      - name: Use Node.js
        uses: actions/setup-node@v1
        with:
          node-version: '14'

      - name: Set user name
        env:
          TZ: 'Asia/Tokyo'
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --global user.email "bot@example.com"
          git config --global user.name "GitHub Actions $GITHUB_RUN_NUMBER"

      - name: Build Project
        env:
          BASE_URL: https://hnkr.ghostserver.jp
        run: |
          cd src
          npm ci
          npm run build

      - name: Create Release Branch
        id: create_branch
        env:
          TZ: 'Asia/Tokyo'
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          DATE=`date +"%Y%m%d"`
          BRANCH_NAME="release/release_${DATE}_${GITHUB_RUN_NUMBER}"
          git checkout -b "$BRANCH_NAME"
          git add *
          git commit -m "release build on ${DATE} #${GITHUB_RUN_NUMBER}"
          git push origin "$BRANCH_NAME"
          echo "::set-output name=branch_name::${BRANCH_NAME}"

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          known_hosts: ${{ secrets.KNOWN_HOST }}

      - name: Stop Containers
        run: ssh ghostserver@ghostserver.jp "cd server/tamahina && docker-compose -f docker-compose.prod.yml stop"

      - name: Checkout Code
        run: ssh ghostserver@ghostserver.jp "cd server/tamahina && git fetch && git checkout ${{needs.build.outputs.branch_name}}"

      - name: Up Containers
        run: ssh ghostserver@ghostserver.jp "cd server/tamahina && docker-compose -f docker-compose.prod.yml up --build -d"

  notify:
    runs-on: ubuntu-latest
    if: always()
    needs: [ build, deploy ]
    steps:
      - name: Workflow Conclusion Action
        uses: technote-space/workflow-conclusion-action@v1

      - name: Discord Message Success Notify
        if: ${{ env.WORKFLOW_CONCLUSION == 'success' }}
        uses: appleboy/discord-action@0.0.3
        with:
          webhook_id: ${{ secrets.DISCORD_WEBHOOK_ID }}
          webhook_token: ${{ secrets.DISCORD_WEBHOOK_TOKEN }}
          color: "#4CAF50"
          username: "GitHub Actions"
          args: デプロイ完了！！ https://github.com/DenpaGhost/tamahina/actions/runs/${{ env.GITHUB_ACTION }}

      - name: Discord Message Success Notify
        if: ${{ env.WORKFLOW_CONCLUSION != 'success' }}
        uses: appleboy/discord-action@0.0.3
        with:
          webhook_id: ${{ secrets.DISCORD_WEBHOOK_ID }}
          webhook_token: ${{ secrets.DISCORD_WEBHOOK_TOKEN }}
          color: "#f44336"
          username: "GitHub Actions"
          args: デプロイ失敗 https://github.com/DenpaGhost/tamahina/actions/runs/${{ env.GITHUB_ACTION }}
